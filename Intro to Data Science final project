{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Are you DTFind Variation in OkCupid Profiles using NLP and Classification?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ethical Considerations\n",
    "\n",
    "There are a few things that we took into account before starting our analysis of this dataset. We broke them up into 5 parts: anonymity, stereotypes, misinterpretation, maximizing effectiveness of a dating profile, and giving credence to the zodiac. Each are given a brief treatment below.  \n",
    "\n",
    "### Anonymity\n",
    "\n",
    "Anonymity was initially a problem with this dataset as it **included the usernames of the profiles**, but the version we are using had said usernames removed. Despite there being no username present, it is still possible that someone might recognize a profile that they saw in one of two ways. First, they recognize the profile from **their own use of the OkCupid app**. This does not seem like a very serious issue as dating profiles are semi-public, and there is an expectation that the user of the app knows that this information is going to be somewhat public. The other way a profile could be recognized is for the profile to have **some identifying information in one of the essays**. Examples could include a link to a Facebook page, an email address, or a first and last name. Since this dataset is rather old, most of the damage that could have been done has most likely already happened, and our use of it will probably not perpetuate any potential future invasions of privacy.\n",
    "\n",
    "### Stereotypes\n",
    "\n",
    "Since we are trying to predict the gender of the account as well and stated religious affiliation, it is conceivable that this could enforce gender and religious stereotypes that some might find harmful. We are approaching this data fairly agnostically and **did not really impose or seek to test any particular view** of gender onto the dataset. It is entirely possible that what we find goes against said stereotypes, thus showing that they are not accurate. Also, even if we could very accurately predict whether or not an account is marked as male or female using the essay and other factors, that doesn't say much of anything. For example, it does nothing to challenge/affirm gender as a social construct or as a binary category. **Our goal is simply to see if there are significant differences** in those profiles and whether or not it is predictive. As far as the religious categories go, we are not making statements about any particular religion, but whether or not certain stated behaviors (drinking and drug use) correlate with stated religiousness or not. As with gender, it is entirely **possible that we will find information that does not cohere to general tropes** about religious people.\n",
    "\n",
    "### Misinterpretation\n",
    "Misinterpretation is always a possibility, and **we will do our best to clearly state** what our results do and do not mean, thus minimizing the potential for misunderstanding. There is always a possibility that someone could maliciously use our analysis in some creative way that we hadn’t counted on, but that harm potential seems very low. \n",
    "\n",
    "### Maximizing a Dating Profile\n",
    "\n",
    "This is a non-issue as **we have no data as to what makes an account more popular than any other.** Someone could not try to maximize their dating prospects using our analysis if they tried.\n",
    "\n",
    "### This gives credence to Zodiacal Sign\n",
    "\n",
    "For one small part, we tried to see if we could get some sort of clustering of zodiac signs. This was more for fun than anything else, but it might give the impression that zodiac signs are to be taken seriously. **No such endorsement is intended on our part**, and if anything, we will demonstrate that at least in some small way that zodiacal signs don’t do very much, or we might find some spurious correlation. Either way, it is doubtful that this will be a serious issue. What’s more, if someone is truly convinced that the zodiac indeed influences personality or the world at large, it seems doubtful that we will do very much to change their mind."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "t1 = time.time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import nltk\n",
    "import string\n",
    "import math\n",
    "import re\n",
    "\n",
    "from scipy import stats, misc\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import RegexpTokenizer, word_tokenize\n",
    "\n",
    "from sklearn import tree, metrics, svm\n",
    "from sklearn.decomposition import TruncatedSVD \n",
    "from sklearn.cluster import *\n",
    "from sklearn.metrics import homogeneity_score, homogeneity_completeness_v_measure\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "\n",
    "\n",
    "#!pip install nltk\n",
    "\n",
    "raw = pd.read_csv('profiles.csv')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importing and cleaning the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data as is was **relatively messy** and contained a lot of leftovers from the webscraping, such as new line indicators as well as indicators for page breaks. Fortunately, this was fairly easy to clean up as most of it was consistent throughout the data. We were able to come up with some **fairly straightforward find and replace commands** to get rid of the noise. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>body_type</th>\n",
       "      <th>diet</th>\n",
       "      <th>drinks</th>\n",
       "      <th>drugs</th>\n",
       "      <th>education</th>\n",
       "      <th>essay0</th>\n",
       "      <th>essay1</th>\n",
       "      <th>essay2</th>\n",
       "      <th>essay3</th>\n",
       "      <th>...</th>\n",
       "      <th>location</th>\n",
       "      <th>offspring</th>\n",
       "      <th>orientation</th>\n",
       "      <th>pets</th>\n",
       "      <th>religion</th>\n",
       "      <th>sex</th>\n",
       "      <th>sign</th>\n",
       "      <th>smokes</th>\n",
       "      <th>speaks</th>\n",
       "      <th>status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>22</td>\n",
       "      <td>a little extra</td>\n",
       "      <td>strictly anything</td>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>working on college/university</td>\n",
       "      <td>about me:  i would love to think that i was so...</td>\n",
       "      <td>currently working as an international agent fo...</td>\n",
       "      <td>making people laugh. ranting about a good salt...</td>\n",
       "      <td>the way i look. i am a six foot half asian, ha...</td>\n",
       "      <td>...</td>\n",
       "      <td>south san francisco, california</td>\n",
       "      <td>doesn't have kids, but might want them</td>\n",
       "      <td>straight</td>\n",
       "      <td>likes dogs and likes cats</td>\n",
       "      <td>agnosticism and very serious about it</td>\n",
       "      <td>m</td>\n",
       "      <td>gemini</td>\n",
       "      <td>sometimes</td>\n",
       "      <td>english</td>\n",
       "      <td>single</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>average</td>\n",
       "      <td>mostly other</td>\n",
       "      <td>often</td>\n",
       "      <td>sometimes</td>\n",
       "      <td>working on space camp</td>\n",
       "      <td>i am a chef: this is what that means. 1. i am ...</td>\n",
       "      <td>dedicating everyday to being an unbelievable b...</td>\n",
       "      <td>being silly. having ridiculous amonts of fun w...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>oakland, california</td>\n",
       "      <td>doesn't have kids, but might want them</td>\n",
       "      <td>straight</td>\n",
       "      <td>likes dogs and likes cats</td>\n",
       "      <td>agnosticism but not too serious about it</td>\n",
       "      <td>m</td>\n",
       "      <td>cancer</td>\n",
       "      <td>no</td>\n",
       "      <td>english (fluently), spanish (poorly), french (...</td>\n",
       "      <td>single</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>38</td>\n",
       "      <td>thin</td>\n",
       "      <td>anything</td>\n",
       "      <td>socially</td>\n",
       "      <td>NaN</td>\n",
       "      <td>graduated from masters program</td>\n",
       "      <td>i'm not ashamed of much, but writing public te...</td>\n",
       "      <td>i make nerdy software for musicians, artists, ...</td>\n",
       "      <td>improvising in different contexts. alternating...</td>\n",
       "      <td>my large jaw and large glasses are the physica...</td>\n",
       "      <td>...</td>\n",
       "      <td>san francisco, california</td>\n",
       "      <td>NaN</td>\n",
       "      <td>straight</td>\n",
       "      <td>has cats</td>\n",
       "      <td>NaN</td>\n",
       "      <td>m</td>\n",
       "      <td>pisces but it doesn't matter</td>\n",
       "      <td>no</td>\n",
       "      <td>english, french, c++</td>\n",
       "      <td>available</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23</td>\n",
       "      <td>thin</td>\n",
       "      <td>vegetarian</td>\n",
       "      <td>socially</td>\n",
       "      <td>NaN</td>\n",
       "      <td>working on college/university</td>\n",
       "      <td>i work in a library and go to school. . .</td>\n",
       "      <td>reading things written by old dead people</td>\n",
       "      <td>playing synthesizers and organizing books acco...</td>\n",
       "      <td>socially awkward but i do my best</td>\n",
       "      <td>...</td>\n",
       "      <td>berkeley, california</td>\n",
       "      <td>doesn't want kids</td>\n",
       "      <td>straight</td>\n",
       "      <td>likes cats</td>\n",
       "      <td>NaN</td>\n",
       "      <td>m</td>\n",
       "      <td>pisces</td>\n",
       "      <td>no</td>\n",
       "      <td>english, german (poorly)</td>\n",
       "      <td>single</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29</td>\n",
       "      <td>athletic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>graduated from college/university</td>\n",
       "      <td>hey how's it going? currently vague on the pro...</td>\n",
       "      <td>work work work work + play</td>\n",
       "      <td>creating imagery to look at: http://bagsbrown....</td>\n",
       "      <td>i smile a lot and my inquisitive nature</td>\n",
       "      <td>...</td>\n",
       "      <td>san francisco, california</td>\n",
       "      <td>NaN</td>\n",
       "      <td>straight</td>\n",
       "      <td>likes dogs and likes cats</td>\n",
       "      <td>NaN</td>\n",
       "      <td>m</td>\n",
       "      <td>aquarius</td>\n",
       "      <td>no</td>\n",
       "      <td>english</td>\n",
       "      <td>single</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   age       body_type               diet    drinks      drugs  \\\n",
       "0   22  a little extra  strictly anything  socially      never   \n",
       "1   35         average       mostly other     often  sometimes   \n",
       "2   38            thin           anything  socially        NaN   \n",
       "3   23            thin         vegetarian  socially        NaN   \n",
       "4   29        athletic                NaN  socially      never   \n",
       "\n",
       "                           education  \\\n",
       "0      working on college/university   \n",
       "1              working on space camp   \n",
       "2     graduated from masters program   \n",
       "3      working on college/university   \n",
       "4  graduated from college/university   \n",
       "\n",
       "                                              essay0  \\\n",
       "0  about me:  i would love to think that i was so...   \n",
       "1  i am a chef: this is what that means. 1. i am ...   \n",
       "2  i'm not ashamed of much, but writing public te...   \n",
       "3          i work in a library and go to school. . .   \n",
       "4  hey how's it going? currently vague on the pro...   \n",
       "\n",
       "                                              essay1  \\\n",
       "0  currently working as an international agent fo...   \n",
       "1  dedicating everyday to being an unbelievable b...   \n",
       "2  i make nerdy software for musicians, artists, ...   \n",
       "3          reading things written by old dead people   \n",
       "4                         work work work work + play   \n",
       "\n",
       "                                              essay2  \\\n",
       "0  making people laugh. ranting about a good salt...   \n",
       "1  being silly. having ridiculous amonts of fun w...   \n",
       "2  improvising in different contexts. alternating...   \n",
       "3  playing synthesizers and organizing books acco...   \n",
       "4  creating imagery to look at: http://bagsbrown....   \n",
       "\n",
       "                                              essay3  ...  \\\n",
       "0  the way i look. i am a six foot half asian, ha...  ...   \n",
       "1                                                NaN  ...   \n",
       "2  my large jaw and large glasses are the physica...  ...   \n",
       "3                  socially awkward but i do my best  ...   \n",
       "4            i smile a lot and my inquisitive nature  ...   \n",
       "\n",
       "                          location                               offspring  \\\n",
       "0  south san francisco, california  doesn't have kids, but might want them   \n",
       "1              oakland, california  doesn't have kids, but might want them   \n",
       "2        san francisco, california                                     NaN   \n",
       "3             berkeley, california                       doesn't want kids   \n",
       "4        san francisco, california                                     NaN   \n",
       "\n",
       "  orientation                       pets  \\\n",
       "0    straight  likes dogs and likes cats   \n",
       "1    straight  likes dogs and likes cats   \n",
       "2    straight                   has cats   \n",
       "3    straight                 likes cats   \n",
       "4    straight  likes dogs and likes cats   \n",
       "\n",
       "                                   religion sex                          sign  \\\n",
       "0     agnosticism and very serious about it   m                        gemini   \n",
       "1  agnosticism but not too serious about it   m                        cancer   \n",
       "2                                       NaN   m  pisces but it doesn't matter   \n",
       "3                                       NaN   m                        pisces   \n",
       "4                                       NaN   m                      aquarius   \n",
       "\n",
       "      smokes                                             speaks     status  \n",
       "0  sometimes                                            english     single  \n",
       "1         no  english (fluently), spanish (poorly), french (...     single  \n",
       "2         no                               english, french, c++  available  \n",
       "3         no                           english, german (poorly)     single  \n",
       "4         no                                            english     single  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# cleaning up html stuff leftover from scraping\n",
    "\n",
    "df = raw.replace(to_replace=\"&rsquo;\", value=\"'\",regex=True)\n",
    "df = df.replace(to_replace=\"<br />\", value=\"\",regex=True)\n",
    "df = df.replace(to_replace=\"\\n\", value=\" \",regex=True)\n",
    "df = df.replace(to_replace=\"href\", value=\"\",regex=True)\n",
    "df = df.replace(to_replace=\"ilink\", value=\"\",regex=True)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NLP: Vocabulary Variation by Gender"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of our goals is to see if we can find significant differences between the profiles marked at male or female. This could be done using factors like height, but also by **parsing the \"about me\" essays and doing some cursory natural language processing** on them. We first separated the profiles marked as male and female and put them into separate data frames."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating separate dataframes for male/female profiles\n",
    "\n",
    "males = df[df[\"sex\"] == 'm']\n",
    "females = df[df[\"sex\"] == 'f']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining a function so it's easy to apply to both data sets\n",
    "\n",
    "def analyze(data):\n",
    "    # remove any profiles that did not complete the 'about me' essay \n",
    "    data_new = data['essay0'].dropna()\n",
    "    \n",
    "    #count how many were removed and print\n",
    "    full = len(data)\n",
    "    no_na = len(data_new)\n",
    "    num_removed = full - no_na\n",
    "    print(\"Total number of essays: \" + str(full))\n",
    "    print(\"Number of essays lost is: \" + str(num_removed))\n",
    "    \n",
    "    # setting stop words standard\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    \n",
    "    # tokenizer to split the data into a list of lists\n",
    "    tokenizer = RegexpTokenizer(r'\\w+')\n",
    "    data_new = data_new.apply(lambda x: tokenizer.tokenize(x.lower()))\n",
    "    \n",
    "    # list needs to be flattened before we can work with it further\n",
    "    flattened = [item for sublist in data_new for item in sublist]\n",
    "    \n",
    "    # now get a frequency distribution for all the words used in the essays\n",
    "    fdist = nltk.FreqDist(flattened)\n",
    "    most_common = fdist.most_common(1000)\n",
    "    \n",
    "    # we will remove stopwords/punctuation to get a better idea of unique words\n",
    "    filtered_words = [word_tuple for word_tuple in most_common if word_tuple[0].lower() not in stop_words]\n",
    "    filtered_words = [word_tuple for word_tuple in filtered_words if word_tuple[0].isalpha()]\n",
    "    \n",
    "    # make into df for ease of further analysis\n",
    "    common_words = pd.DataFrame(filtered_words)\n",
    "    common_words.rename(columns={0:\"Most Common Words\", 1:\"Frequency\"}, inplace=True)\n",
    "    \n",
    "    # normalize # of times the word was used by # of profiles\n",
    "    common_words[\"Frequency\"] = common_words[\"Frequency\"]/no_na\n",
    "    \n",
    "    return common_words, data_new\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of essays: 35829\n",
      "Number of essays lost is: 3181\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Most Common Words</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>like</td>\n",
       "      <td>0.809054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>love</td>\n",
       "      <td>0.706169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>life</td>\n",
       "      <td>0.496171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>people</td>\n",
       "      <td>0.468941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>interests</td>\n",
       "      <td>0.442753</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Most Common Words  Frequency\n",
       "0              like   0.809054\n",
       "1              love   0.706169\n",
       "2              life   0.496171\n",
       "3            people   0.468941\n",
       "4         interests   0.442753"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# run on male profiles\n",
    "male_most_common, male_tokenized = analyze(males)\n",
    "\n",
    "male_most_common.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    [about, me, i, would, love, to, think, that, i...\n",
       "1    [i, am, a, chef, this, is, what, that, means, ...\n",
       "2    [i, m, not, ashamed, of, much, but, writing, p...\n",
       "3       [i, work, in, a, library, and, go, to, school]\n",
       "4    [hey, how, s, it, going, currently, vague, on,...\n",
       "Name: essay0, dtype: object"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# this is what the tokenized essays look like\n",
    "\n",
    "male_tokenized[0:5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of essays: 24117\n",
      "Number of essays lost is: 2307\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Most Common Words</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>love</td>\n",
       "      <td>1.122513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>like</td>\n",
       "      <td>0.824392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>life</td>\n",
       "      <td>0.575103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>people</td>\n",
       "      <td>0.527006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>new</td>\n",
       "      <td>0.453324</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Most Common Words  Frequency\n",
       "0              love   1.122513\n",
       "1              like   0.824392\n",
       "2              life   0.575103\n",
       "3            people   0.527006\n",
       "4               new   0.453324"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "female_most_common, female_tokenized = analyze(females)\n",
    "female_most_common.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:** Females use the word \"love\" so frequently in their about me essays that it (on average) appeared at least once in every profile.\n",
    "\n",
    "We then took a look at the top words that were unique to both male and female marked profiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Words that females use more often:\n",
      "['cats', 'intelligence', 'dive', 'sassy', 'creating', 'adore', 'bed', 'animal', 'hearted', 'baking', 'awkward', 'fashion', 'emotionally', 'dirty', 'hikes', 'planning', 'shopping', 'heels', 'sorry', 'sunshine']\n",
      "\n",
      "Words that males use more often:\n",
      "['university', 'technology', 'shit', 'played', 'computer', 'average', 'engineer', 'nbsp', 'treat', 'cars', 'geeky', 'shape', 'simply', 'send', 'joke', 'backpacking', 'attention', 'motorcycle', 'seen', 'graduate']\n"
     ]
    }
   ],
   "source": [
    "# first we will see what words are different between the profile types\n",
    "f_most_common = list(set(female_most_common[\"Most Common Words\"]) - set(male_most_common[\"Most Common Words\"]))\n",
    "m_most_common = list(set(male_most_common[\"Most Common Words\"]) - set(female_most_common[\"Most Common Words\"]))\n",
    "\n",
    "# words that are present in female most common words but not in male most common\n",
    "print(\"Words that females use more often:\")\n",
    "print(f_most_common[0:20])\n",
    "print()\n",
    "# words that are present in  male most common words but not in female most common\n",
    "print(\"Words that males use more often:\")\n",
    "print(m_most_common[0:20])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not too much that we can tell by just looking at these hollistically, but it is interesting to note that **females seem to address ideals/values** more: \"curiosity\", \"grounded\", \"helping\", \"hearted\". While **males seem to write about their hobbies/occupations**: \"cars\", \"band\", \"surfing\", \"driving\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classifying Gender by Essay Content"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we will use cross validation to choose the vectorizer we like the most. Using Naive Bayes as base classifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_vectorizer(essays, target, v_type, include_stopwords_yes_or_no):\n",
    "    essays = essays.dropna()\n",
    "    \n",
    "    if include_stopwords_yes_or_no == \"yes\":\n",
    "        vectorizer = v_type()\n",
    "    else:\n",
    "        vectorizer = v_type(stop_words='english')\n",
    "    \n",
    "    vectors = vectorizer.fit_transform(essays)\n",
    "    \n",
    "    X = vectors\n",
    "    y = target\n",
    "    \n",
    "    # test/train split\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)\n",
    "    \n",
    "    # fit classifier\n",
    "    clf = MultinomialNB(alpha = 1)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    \n",
    "    return(metrics.f1_score(y_test, y_pred, average ='macro'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CountVectorizer, Stop Words Removed: 0.7025659479354733\n",
      "CountVectorizer, Stop Words Included: 0.6991169403429339\n",
      "TfidfVectorizer, Stop Words Removed: 0.4680178138722464\n",
      "TfidfVectorizer, Stop Words Included: 0.4399905261516463\n"
     ]
    }
   ],
   "source": [
    "gender = df.loc[:, [\"sex\", \"essay0\"]]\n",
    "gender = gender.dropna()\n",
    "\n",
    "gender_essays = gender[\"essay0\"]\n",
    "gender_target = gender[\"sex\"]\n",
    "\n",
    "print(\"CountVectorizer, Stop Words Removed: \" + str(my_vectorizer(gender_essays, gender_target, CountVectorizer, \"no\")))\n",
    "print(\"CountVectorizer, Stop Words Included: \" + str(my_vectorizer(gender_essays, gender_target, CountVectorizer, \"yes\")))\n",
    "print(\"TfidfVectorizer, Stop Words Removed: \" + str(my_vectorizer(gender_essays, gender_target, TfidfVectorizer, \"no\")))\n",
    "print(\"TfidfVectorizer, Stop Words Included: \" + str(my_vectorizer(gender_essays, gender_target, TfidfVectorizer, \"yes\")))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Naive Bayes gives **mediocre performance with 70% accuracy**, we should check if we can improve that with another classifier. We will proceed with CountVectorizer, stop words removed and try a DecisionTree and RandomForest classsifiers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer(stop_words='english')\n",
    "X = vectorizer.fit_transform(gender_essays)\n",
    "y = gender_target\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.594 0.625 0.612 0.618 0.611 0.603 0.594 0.584 0.589 0.587 0.597 0.59\n",
      " 0.593 0.603 0.588 0.602 0.594 0.596 0.581 0.599]\n",
      "[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.\n",
      " 19. 20.]\n",
      "[0.557 0.544 0.565 0.604 0.603 0.617 0.619 0.619 0.594 0.594]\n",
      "[0.01 0.12 0.23 0.34 0.45 0.56 0.67 0.78 0.89 1.  ]\n"
     ]
    }
   ],
   "source": [
    "# cross validation to choose best parameters for randomforest\n",
    "\n",
    "s_X = X[0:1000]\n",
    "s_y = y[0:1000]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.66)\n",
    "\n",
    "# choosing max_depth parameter\n",
    "max_depth = np.linspace(1,20,20)\n",
    "Accuracies = np.zeros(max_depth.shape[0])\n",
    "for i,depth in enumerate(max_depth): \n",
    "    decisionTree = tree.DecisionTreeClassifier(max_depth = depth)\n",
    "    scores = cross_val_score(estimator = decisionTree, X = s_X, y = s_y, cv=5, scoring='accuracy')    \n",
    "    Accuracies[i] = scores.mean()\n",
    "print(Accuracies)\n",
    "print(max_depth)\n",
    "\n",
    "# choosing best min_samples_split\n",
    "min_samples_split = np.linspace(0.01,1,10)\n",
    "Accuracies = np.zeros(min_samples_split.shape[0])\n",
    "for i,split in enumerate(min_samples_split): \n",
    "    decisionTree = tree.DecisionTreeClassifier(min_samples_split = split)\n",
    "    scores = cross_val_score(estimator = decisionTree, X = s_X, y = s_y, cv=5, scoring='accuracy')    \n",
    "    Accuracies[i] = scores.mean()\n",
    "print(Accuracies)\n",
    "print(min_samples_split)\n",
    "\n",
    "# best max_depth = 2\n",
    "# best min_samples_split = 0.67"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on training data=  0.6288414798811774\n",
      "Accuracy on test data=  0.6284951172690093\n"
     ]
    }
   ],
   "source": [
    "# now fit and test DecisionTree with the parameters we found\n",
    "\n",
    "decisionTree = tree.DecisionTreeClassifier(max_depth=2, min_samples_split=0.67)\n",
    "\n",
    "decisionTree = decisionTree.fit(X_train, y_train)\n",
    "\n",
    "y_pred_train = decisionTree.predict(X_train)\n",
    "print('Accuracy on training data= ', metrics.accuracy_score(y_true = y_train, y_pred = y_pred_train))\n",
    "\n",
    "y_pred = decisionTree.predict(X_test)\n",
    "print('Accuracy on test data= ', metrics.accuracy_score(y_true = y_test, y_pred = y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on training data=  0.998109640831758\n",
      "Accuracy on test data=  0.6924018584981777\n"
     ]
    }
   ],
   "source": [
    "forest =  RandomForestClassifier(bootstrap=True, n_estimators=300, random_state=0)\n",
    "trained_forest = forest.fit(X_train, y_train)\n",
    "\n",
    "y_pred_train = trained_forest.predict(X_train)\n",
    "print('Accuracy on training data= ', metrics.accuracy_score(y_true = y_train, y_pred = y_pred_train))\n",
    "\n",
    "y_pred = trained_forest.predict(X_test)\n",
    "print('Accuracy on test data= ', metrics.accuracy_score(y_true = y_test, y_pred = y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not particularly desirable results. Binary classification with equally sized groups would yield about 50% accuracy just assigning one target at random. This dataset is actually split 60/40 biased toward males, so a **classifier that assigned male to every profile would get 60% accuracy out of the hat**. RandomForest (69.2%) seemed to perform better than DecisionTree (63.8%), but **Naive Bayes (70.3%) outperformed them both.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classifying religiousness based on drinking/drug use/smoking"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another one of our goals is to create a classifier for reported religiousness based on reported drinking, drug use, and smoking. First, we dropped the profiles that didn't have religious information listed at all. This knocked out a whopping 20,226 profiles which is quite substantial as there are about 65,000 profiles in total. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the **first iteration** of this part of the project, we completely **left the religiousness answers alone**, and the classifier was really struggling (**accuracy was around 25%**). This is--in part--because in addition to 10+ different religions being reported, there are qualifying statements added to the answers that give a sense for the seriousness behind the answer. For example, some answers are: \"catholic and laughing about it\" and \"atheism and very serious about it.\" This greatly increases the number/types of answers given.\n",
    "\n",
    "We then tried to split the religion away from the qualifying statement and use the qualifier in the classification. This did not seem to help much (accuracy still hovered around 30%). **We binned the religions into three groups: religious, agnostic, atheist. This increased accuracy to ~60%**. Finally, we decided to drop the qualifier statement from the classifier and to **only work with answers that were very/somewhat \"serious about it.\"**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20226\n"
     ]
    }
   ],
   "source": [
    "# get a df with no NaN values in religion and see how many we lost\n",
    "\n",
    "df.head()\n",
    "full = len(df)\n",
    "religion = df[df[\"religion\"].notna()]\n",
    "removed = len(religion)\n",
    "print(full - removed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       [agnosticism, and very serious about it]\n",
       "1    [agnosticism, but not too serious about it]\n",
       "2                                 [christianity]\n",
       "3               [atheism, and laughing about it]\n",
       "4      [christianity, and very serious about it]\n",
       "Name: religion, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pare the df down to features we care about\n",
    "religion = religion.loc[:, [\"drinks\", \"drugs\", \"religion\", \"smokes\"]]\n",
    "religion = religion.dropna()\n",
    "features = religion.drop(columns=[\"religion\"])\n",
    "features = features.reset_index(drop=True)\n",
    "\n",
    "# now we need the target\n",
    "target = religion[\"religion\"]\n",
    "\n",
    "# the target is split into \"religion, and xxx\" which will be useful when splitting the statement away\n",
    "target = target.str.split(n=1)\n",
    "target = target.reset_index(drop=True)\n",
    "target[0:5]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "OkCupid allows users to add a line about how serious they are about their religious affiliation. We split the \"qualifying statement\" out from their religious affiliation so that it could be used as a predictive factor. Some users did not have a qualifying statement, so we put \"Neutral\" instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['agnosticism', 'agnosticism', 'christianity', 'atheism', 'christianity']\n",
      "['and very serious about it', 'but not too serious about it', 'Neutral', 'and laughing about it', 'and very serious about it']\n"
     ]
    }
   ],
   "source": [
    "# we will split the religion from the qualifying statement\n",
    "\n",
    "targets = []\n",
    "qualifiers = []\n",
    "\n",
    "for item in target:\n",
    "    targets.append(item[0])\n",
    "    if len(item) == 1:\n",
    "        qualifiers.append(\"Neutral\") # those with no qualifier\n",
    "    else:\n",
    "        qualifiers.append(item[1])\n",
    "\n",
    "print(targets[0:5])\n",
    "print(qualifiers[0:5])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>drinks</th>\n",
       "      <th>drugs</th>\n",
       "      <th>smokes</th>\n",
       "      <th>qualifier</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>sometimes</td>\n",
       "      <td>and very serious about it</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>often</td>\n",
       "      <td>sometimes</td>\n",
       "      <td>no</td>\n",
       "      <td>but not too serious about it</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>no</td>\n",
       "      <td>Neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>not at all</td>\n",
       "      <td>never</td>\n",
       "      <td>no</td>\n",
       "      <td>and laughing about it</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>no</td>\n",
       "      <td>and very serious about it</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       drinks      drugs     smokes                     qualifier\n",
       "0    socially      never  sometimes     and very serious about it\n",
       "1       often  sometimes         no  but not too serious about it\n",
       "2    socially      never         no                       Neutral\n",
       "3  not at all      never         no         and laughing about it\n",
       "4    socially      never         no     and very serious about it"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add the qualifying statement to the features so it can be used for classification\n",
    "\n",
    "features[\"qualifier\"] = qualifiers\n",
    "features.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['agnosticism', 'agnosticism', 'Religious', 'atheism', 'Religious']"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# grouping religions together\n",
    "\n",
    "for n, i in enumerate(targets):\n",
    "    if i == \"atheism\":\n",
    "        pass\n",
    "    elif i == \"agnosticism\":\n",
    "        pass\n",
    "    else:\n",
    "        targets[n] = \"Religious\"\n",
    "        \n",
    "targets[0:5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['agnosticism', 'agnosticism', 'Religious', 'atheism', 'Serious Religious', 'Religious', 'Religious', 'Religious', 'Religious', 'Religious']\n"
     ]
    }
   ],
   "source": [
    "#This creates new targets that integrate some of the qualifying statements\n",
    "new_targets = []\n",
    "\n",
    "for x in range(0,len(targets)):\n",
    "    if targets[x] == 'Religious' and qualifiers[x] == 'and very serious about it':\n",
    "        new_targets.append('Serious Religious')\n",
    "    elif targets[x] == 'Religious' and qualifiers[x] == 'and somewhat serious about it':\n",
    "        new_targets.append('Serious Religious')\n",
    "    elif targets[x] == 'atheism' and qualifiers[x] == 'and very serious about it':\n",
    "        new_targets.append('Serious Atheist')\n",
    "    elif targets[x] == 'atheism' and qualifiers[x] == 'and somewhat serious about it':\n",
    "        new_targets.append('Serious Atheist')\n",
    "    else:\n",
    "        new_targets.append(targets[x])\n",
    "\n",
    "print(new_targets[0:10])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>drinks</th>\n",
       "      <th>drugs</th>\n",
       "      <th>smokes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>when drinking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>rarely</td>\n",
       "      <td>sometimes</td>\n",
       "      <td>sometimes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>socially</td>\n",
       "      <td>never</td>\n",
       "      <td>no</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      drinks      drugs         smokes\n",
       "4   socially      never             no\n",
       "10  socially      never             no\n",
       "19  socially      never  when drinking\n",
       "32    rarely  sometimes      sometimes\n",
       "48  socially      never             no"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features[\"new_targets\"] = new_targets\n",
    "\n",
    "features = features[features.new_targets.str.contains(\"Serious\")]\n",
    "\n",
    "new_targets = features[\"new_targets\"]\n",
    "features = features.drop(columns=[\"new_targets\", \"qualifier\"])\n",
    "features.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We set up an SVM classifier and split the data into a test set and a training set and did some tests to find a proper C value. 1 had highest accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# one hot key encode our df so we can use classifier on it\n",
    "\n",
    "X = pd.get_dummies(features)\n",
    "y = new_targets\n",
    "\n",
    "# split into test/train sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.8)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use smaller set so this loop doesn't take 10 years\n",
    "small_x = X[0:1000]\n",
    "small_y = y[0:1000]\n",
    "\n",
    "# cross val to choose C\n",
    "Cs = np.linspace(1,20,20)\n",
    "Accuracies = np.zeros(Cs.shape[0])\n",
    "for i,C in enumerate(Cs): \n",
    "    h1 = svm.SVC(kernel='rbf', C = C, gamma='scale')\n",
    "    scores = cross_val_score(estimator = h1, X = small_x, y = small_y, cv=5, scoring='accuracy')    \n",
    "    Accuracies[i] = scores.mean()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.748 0.747 0.747 0.745 0.745 0.745 0.745 0.745 0.745 0.745 0.745 0.745\n",
      " 0.745 0.745 0.745 0.745 0.745 0.745 0.745 0.745]\n",
      "[ 1.  2.  3.  4.  5.  6.  7.  8.  9. 10. 11. 12. 13. 14. 15. 16. 17. 18.\n",
      " 19. 20.]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# quick look\n",
    "plt.plot(Accuracies)\n",
    "print(Accuracies)\n",
    "print(Cs)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score is: 0.7626105044201769\n"
     ]
    }
   ],
   "source": [
    "# fit SVM\n",
    "\n",
    "h1 = svm.SVC(kernel='rbf', C=1, gamma='scale')\n",
    "h1.fit(X_train,y_train)\n",
    "print(\"Score is: \" + str(h1.score(X_test,y_test)))\n",
    "\n",
    "# not bad, but let's see if something else works better.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With 3 groups of individuals who are serious about their religious status, the classifier is performing with 76% accuracy. This is a **huge improvement** over the original 25%!\n",
    "\n",
    "One option to try improving the classifier is to **make the system completely binary** by lumping atheism and agnosticism together. This would reduce the target to religious vs. nonreligious. Of course, we don't want to risk making the classifier **too simplistic**, as it will no longer be informative."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Other Classifiers:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition to the SVM, we ran the same data through a randomforest and Naive Bayes to see if there was any significant difference in the accuracy. As it turns out it was **about the same with randomforest**, and **Naive Bayes performed with much lower accuracy** at 54.2%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on training data=  0.7950052029136316\n",
      "Accuracy on test data=  0.75065002600104\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "forest =  RandomForestClassifier(bootstrap=True, n_estimators=300, random_state=0)\n",
    "trained_forest = forest.fit(X_train, y_train)\n",
    "\n",
    "y_pred_train = trained_forest.predict(X_train)\n",
    "print('Accuracy on training data= ', metrics.accuracy_score(y_true = y_train, y_pred = y_pred_train))\n",
    "\n",
    "y_pred = trained_forest.predict(X_test)\n",
    "print('Accuracy on test data= ', metrics.accuracy_score(y_true = y_test, y_pred = y_pred))\n",
    "\n",
    "# about the same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5426268699724109"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = MultinomialNB(alpha = 1)\n",
    "clf.fit(X_train, y_train)\n",
    "y_pred = clf.predict(X_test)\n",
    "metrics.f1_score(y_test, y_pred, average ='macro')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature Importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 Variable       Score\n",
      "8         drugs_sometimes  212.180696\n",
      "2            drinks_often   89.545863\n",
      "6             drugs_never   48.338981\n",
      "13             smokes_yes   25.751481\n",
      "1       drinks_not at all   20.317949\n",
      "3           drinks_rarely   15.904310\n",
      "12   smokes_when drinking    4.358407\n",
      "7             drugs_often    3.495767\n",
      "9               smokes_no    3.224041\n",
      "5       drinks_very often    1.434365\n",
      "4         drinks_socially    0.373772\n",
      "0      drinks_desperately    0.193669\n",
      "11  smokes_trying to quit    0.021718\n",
      "10       smokes_sometimes    0.008545\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import SelectKBest\n",
    "from sklearn.feature_selection import chi2\n",
    "\n",
    "#apply SelectKBest class to extract top 10 best features\n",
    "bestfeatures = SelectKBest(score_func=chi2, k='all')\n",
    "fit = bestfeatures.fit(X, y)\n",
    "\n",
    "dfscores = pd.DataFrame(fit.scores_)\n",
    "dfcolumns = pd.DataFrame(X.columns)\n",
    "\n",
    "#concat two dataframes for better visualization \n",
    "featureScores = pd.concat([dfcolumns, dfscores], axis=1)\n",
    "featureScores.columns = ['Variable','Score']\n",
    "print(featureScores.sort_values(\"Score\", ascending=False))  #print best features\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The top feature is whether the person uses drugs sometimes, followed by whether they drink often."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Co-occurence Matrix (Visual Exploratory Data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One thought for analysis we had was to check **how often two features occur together.** For example: how often do the features of disliking cats and being female occur together? These can be visualized through a co-occurence matrix. It is also an interesting statistical experiment because you can use Naive Bayes to make predictions when you have the co-occurence data. In other words, you can answer a question like this: given that you are female, what is the probability that you dislike cats?\n",
    "\n",
    "It is difficult to work with a many-dimensional data set like this one for feature co-occurence, so we only **chose a subset of the available features** to work on. The features we chose are: pet and children preferences, education level, occupation (this had to be binned into just a few categories), and gender.\n",
    "\n",
    "The first code blocks are a few long functions to help parse through the categorical features and create a dataframe from the answers. We bin answers into groups (in the case of education and occupation) and one hot key encode simultaneously in the functions. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creates lists to determine if the profiles is marked to like cats or dogs\n",
    "\n",
    "likes_dogs = []\n",
    "dislike_dogs = []\n",
    "dislike_cats = []\n",
    "\n",
    "def cat_attack(this_list):\n",
    "    likes_cats = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('has cats' in str(this_list[x])) == True:\n",
    "            likes_cats.append(1)\n",
    "        elif ('likes cats' in str(this_list[x])) == True:\n",
    "            likes_cats.append(1)\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            likes_cats.append(None)\n",
    "        else:\n",
    "            likes_cats.append(0)\n",
    "    return likes_cats\n",
    "\n",
    "def dog_attack(this_list):\n",
    "    likes_dogs = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('has dogs' in str(this_list[x])) == True:\n",
    "            likes_dogs.append(1)\n",
    "        elif ('likes dogs' in str(this_list[x])) == True:\n",
    "            likes_dogs.append(1)\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            likes_dogs.append(None)\n",
    "        else:\n",
    "            likes_dogs.append(0)\n",
    "    return likes_dogs\n",
    "\n",
    "def dog_hate(this_list):\n",
    "    dislikes_dogs = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('dislikes dogs' in str(this_list[x])) == True:\n",
    "            dislikes_dogs.append(1)\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            dislikes_dogs.append(None)\n",
    "        else:\n",
    "            dislikes_dogs.append(0)\n",
    "    return dislikes_dogs\n",
    "\n",
    "def cat_hate(this_list):\n",
    "    dislikes_cats = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('dislikes cats' in str(this_list[x])) == True:\n",
    "            dislikes_cats.append(1)\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            dislikes_cats.append(None)\n",
    "        else:\n",
    "            dislikes_cats.append(0)\n",
    "    return dislikes_cats\n",
    "\n",
    "\n",
    "like_cat = cat_attack(df['pets'])\n",
    "like_dog = dog_attack(df['pets'])\n",
    "dislike_dog = dog_hate(df['pets'])\n",
    "dislike_cats = cat_hate(df['pets'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "sexes = df[[\"sex\"]]\n",
    "sexes = sexes.replace(to_replace=\"m\", value=\"0\",regex=True)\n",
    "sexes = sexes.replace(to_replace=\"f\", value=\"1\",regex=True)\n",
    "sexes = sexes['sex'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#functions to categorize people who have/want children\n",
    "\n",
    "def has_children(this_list):\n",
    "    output = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('has kids' in str(this_list[x])) == True:\n",
    "            output.append(1)\n",
    "        elif ('has a kid' in str(this_list[x])) == True:\n",
    "            output.append(1)\n",
    "        elif (\"doesn't have kids\" in str(this_list[x])) == True:\n",
    "            output.append(0)\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            output.append(None)\n",
    "        else:\n",
    "            output.append(None)\n",
    "    return output\n",
    "\n",
    "def wants_children(this_list):\n",
    "    output = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('but wants them' in str(this_list[x])) == True:\n",
    "            output.append(1)\n",
    "        elif (\"but might want them\" in str(this_list[x])) == True:\n",
    "            output.append(1)\n",
    "        elif (\"want kids\" in str(this_list[x])) == True:\n",
    "            output.append(1)\n",
    "        elif (\"might want more\" in str(this_list[x])) == True:\n",
    "            output.append(1)\n",
    "        elif (\"doesn't want kids\" in str(this_list[x])) == True:\n",
    "            output.append(0)\n",
    "        elif (\"doesn't want more\" in str(this_list[x])) == True:\n",
    "            output.append(0)\n",
    "        elif (\"doesn't want any\" in str(this_list[x])) == True:\n",
    "            output.append(0)\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            output.append(None)\n",
    "        else:\n",
    "            output.append(None)\n",
    "    return output\n",
    "\n",
    "has_kids_list = []\n",
    "wants_kids_list = []\n",
    "\n",
    "has_kids_list = has_children(df['offspring'])\n",
    "wants_kids_list = wants_children(df['offspring'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "59946\n"
     ]
    }
   ],
   "source": [
    "# function to organize occupation\n",
    "def occupation(this_list):\n",
    "    output = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('student' in str(this_list[x])) == True:\n",
    "            output.append('student')\n",
    "        elif (\"software\" in str(this_list[x])) == True:\n",
    "            output.append('stem')\n",
    "        elif (\"science\" in str(this_list[x])) == True:\n",
    "            output.append('stem')\n",
    "        elif (\"computer\" in str(this_list[x])) == True:\n",
    "            output.append('stem')\n",
    "        elif (\"engineering\" in str(this_list[x])) == True:\n",
    "            output.append('stem')\n",
    "        elif (\"tech\" in str(this_list[x])) == True:\n",
    "            output.append('stem')\n",
    "        elif (\"artistic\" in str(this_list[x])) == True:\n",
    "            output.append('art')\n",
    "        elif (\"musical\" in str(this_list[x])) == True:\n",
    "            output.append('art')\n",
    "        elif (\"writer\" in str(this_list[x])) == True:\n",
    "            output.append('art')\n",
    "        elif (\"medicine\" in str(this_list[x])) == True:\n",
    "            output.append('health')\n",
    "        elif (\"health\" in str(this_list[x])) == True:\n",
    "            output.append('health')\n",
    "        elif (\"financial\" in str(this_list[x])) == True:\n",
    "            output.append('finance')\n",
    "        elif (\"banking \" in str(this_list[x])) == True:\n",
    "            output.append('finance')\n",
    "        elif (\"sales\" in str(this_list[x])) == True:\n",
    "            output.append('finance')\n",
    "        elif (\"education\" in str(this_list[x])) == True:\n",
    "            output.append('education')\n",
    "        elif (\"academia\" in str(this_list[x])) == True:\n",
    "            output.append('education')\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            output.append(None)\n",
    "        else:\n",
    "            output.append('other')\n",
    "    return output\n",
    "\n",
    "ocupation_list = []\n",
    "occupation_list = occupation(df['job'])\n",
    "print(len(occupation_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#crates list of education level\n",
    "def education_level(this_list):\n",
    "    output = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if ('working on college' in str(this_list[x])) == True:\n",
    "            output.append('college')\n",
    "        elif ('graduated from college' in str(this_list[x])) == True:\n",
    "            output.append('college')\n",
    "        elif (\"working on masters program\" in str(this_list[x])) == True:\n",
    "            output.append('masters')\n",
    "        elif (\"graduated from masters program\" in str(this_list[x])) == True:\n",
    "            output.append('masters')\n",
    "        elif (\"two-year\" in str(this_list[x])) == True:\n",
    "            output.append('college')\n",
    "        elif (\"ph.d program\" in str(this_list[x])) == True:\n",
    "            output.append('phd')\n",
    "        elif (\"dropped\" in str(this_list[x])) == True:\n",
    "            output.append('no college')\n",
    "        elif (\"space camp\" in str(this_list[x])) == True:\n",
    "            output.append('no college')\n",
    "        elif ('nan' in str(this_list[x])) == True:\n",
    "            output.append(None)\n",
    "        else:\n",
    "            output.append(None)\n",
    "    return output\n",
    "\n",
    "education_list = []\n",
    "education_list = education_level(df['education'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this makes a list of income level\n",
    "def income_level(this_list):\n",
    "    output = []\n",
    "    for x in range(0,len(this_list)):\n",
    "        if df['income'][x] == (-1):\n",
    "            output.append(None)\n",
    "        elif df['income'][x] < 20000 and df['income'][x] > 0:\n",
    "            output.append('Poverty')\n",
    "        elif df['income'][x] < 45000 and df['income'][x] >= 20000:\n",
    "            output.append('Low')\n",
    "        elif 45000 <= df['income'][x] < 140000:\n",
    "            output.append('Middle')\n",
    "        elif df['income'][x] >= 140000:\n",
    "            output.append('Wealthy')\n",
    "        else:\n",
    "            output.append(None)\n",
    "    return output\n",
    "income_list = []\n",
    "income_list = income_level(df['income'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LikesCats</th>\n",
       "      <th>DislikesCats</th>\n",
       "      <th>LikesDogs</th>\n",
       "      <th>DislikesDogs</th>\n",
       "      <th>HasChildren</th>\n",
       "      <th>WantsChildren</th>\n",
       "      <th>Job</th>\n",
       "      <th>Education</th>\n",
       "      <th>Income</th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>other</td>\n",
       "      <td>college</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>other</td>\n",
       "      <td>no college</td>\n",
       "      <td>Middle</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>masters</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>student</td>\n",
       "      <td>college</td>\n",
       "      <td>Low</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>art</td>\n",
       "      <td>college</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   LikesCats  DislikesCats  LikesDogs  DislikesDogs  HasChildren  \\\n",
       "0        1.0           0.0        1.0           0.0          0.0   \n",
       "1        1.0           0.0        1.0           0.0          0.0   \n",
       "2        1.0           0.0        0.0           0.0          NaN   \n",
       "3        1.0           0.0        0.0           0.0          NaN   \n",
       "4        1.0           0.0        1.0           0.0          NaN   \n",
       "\n",
       "   WantsChildren      Job   Education  Income Sex  \n",
       "0            1.0    other     college    None   0  \n",
       "1            1.0    other  no college  Middle   0  \n",
       "2            NaN     None     masters    None   0  \n",
       "3            1.0  student     college     Low   0  \n",
       "4            NaN      art     college    None   0  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlations = pd.DataFrame({\"LikesCats\" : like_cat,\n",
    "                             \"DislikesCats\" : dislike_cats,\n",
    "                             \"LikesDogs\": like_dog,\n",
    "                             \"DislikesDogs\" : dislike_dog,\n",
    "                             \"HasChildren\": has_kids_list,\n",
    "                             \"WantsChildren\": wants_kids_list,\n",
    "                             \"Job\": occupation_list,\n",
    "                             \"Education\": education_list,\n",
    "                             \"Income\": income_list,\n",
    "                             \"Sex\": sexes})\n",
    "\n",
    "correlations.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sex               0        1\n",
      "LikesDogs                   \n",
      "0.0        0.060993  0.06969\n",
      "1.0        0.939007  0.93031\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a39e7f898>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create co-occurence matrices and heatmaps to visualize pet data with genders\n",
    "\n",
    "cat_like_comat = pd.crosstab(correlations.LikesCats, correlations.Sex).apply(lambda r: r/r.sum(), axis=0)\n",
    "cat_dislike_comat = pd.crosstab(correlations.DislikesCats, correlations.Sex).apply(lambda r: r/r.sum(), axis=0)\n",
    "dog_like_comat = pd.crosstab(correlations.LikesDogs, correlations.Sex).apply(lambda r: r/r.sum(), axis=0)\n",
    "dog_dislike_comat = pd.crosstab(correlations.DislikesDogs, correlations.Sex).apply(lambda r: r/r.sum(), axis=0)\n",
    "\n",
    "xlab=[\"Male\", \"Female\"]\n",
    "ylike=[\"N/A\", \"Likes\"]\n",
    "ydislike=[\"N/A\", \"Dislikes\"]\n",
    "\n",
    "f, axes = plt.subplots(2, 2, figsize=(12,12))\n",
    "\n",
    "print(dog_like_comat)\n",
    "\n",
    "sns.heatmap(cat_like_comat, cmap=\"Blues\", ax=axes[0,0], xticklabels=xlab, yticklabels=ylike, annot=True)\n",
    "sns.heatmap(cat_dislike_comat, cmap=\"Blues\", ax=axes[0,1],xticklabels=xlab, yticklabels=ydislike, annot=True)\n",
    "sns.heatmap(dog_like_comat, cmap=\"Reds\", ax=axes[1,0],xticklabels=xlab, yticklabels=ylike, annot=True)\n",
    "sns.heatmap(dog_dislike_comat, cmap=\"Reds\", ax=axes[1,1],xticklabels=xlab, yticklabels=ydislike, annot=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can gather from this data that **most people are reluctant to admit they dislike dogs or cats**, and the **genders are split pretty evenly** when you look at the individual categories. More people like dogs than cats.\n",
    "\n",
    "Note: For \"Dislikes Dogs\" N/A encompasses all the people who a) like dogs or b) did not put whether they like dogs or dislike them. \n",
    "\n",
    "Another important note: we are NOT working with absolute values and are using percentages instead. This means that we are talking about 1.3% of female profiles in the dataset, not 1.3% of total. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a337c5ef0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "education_comat = pd.crosstab(correlations.Education, correlations.Sex).apply(lambda c: c/c.sum(), axis=0)\n",
    "occupation_comat = pd.crosstab(correlations.Job, correlations.Sex).apply(lambda c: c/c.sum(), axis=0)\n",
    "\n",
    "xlab=[\"Male\", \"Female\"]\n",
    "ylike=[\"Likes\", \"No Opinion\"]\n",
    "ydislike=[\"No Opinion\", \"Dislikes\"]\n",
    "\n",
    "f, axes = plt.subplots(1, 2, figsize=(14,6))\n",
    "\n",
    "\n",
    "sns.heatmap(education_comat, cmap=\"Blues\", ax=axes[0], xticklabels=xlab, annot=True)\n",
    "sns.heatmap(occupation_comat, cmap=\"Reds\", ax=axes[1],xticklabels=xlab,annot=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we examine the different frequency of occupation type and education level between the two genders.\n",
    "\n",
    "Notable differences: **26% of females reported attaining a master's degree vs. only 19% of males** reported the same. In the occupation field, **25% of males report a STEM-related occupation, while only 8.1% of females** report STEM occupations. **Health and education, however, are female dominated** at 11% each--compared to 4.3% and 4.8% respectively for males. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a3abe7ef0>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wants_children_comat = pd.crosstab(correlations.Education, correlations.WantsChildren).apply(lambda r: r/r.sum(), axis=1)\n",
    "has_children_comat = pd.crosstab(correlations.Education, correlations.HasChildren).apply(lambda r: r/r.sum(), axis=1)\n",
    "\n",
    "\n",
    "xlabwant=[\"Does not want children\", \"Wants children\"]\n",
    "xlabhave=[\"Does not have children\", \"Has children\"]\n",
    "\n",
    "\n",
    "\n",
    "f, axes = plt.subplots(1, 2, figsize=(14,6))\n",
    "\n",
    "\n",
    "sns.heatmap(wants_children_comat, cmap=\"Blues\", ax=axes[0], xticklabels=xlabwant, annot=True)\n",
    "sns.heatmap(has_children_comat, cmap=\"Reds\", ax=axes[1],xticklabels=xlabhave,annot=True)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also took a look at child preferences compared against their education level. Whether people want/have children seems to be **pretty evenly spread across different education levels**. There is very little variation between the groups. **Most people on OkCupid do not have children, but want them** (makes sense, as this is a dating website). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clustering Zodiac Signs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since clustering is an unsupervised machine learning method, we can pretty much ignore the ground truth labels in the dataset. We will simply try to cluster the data (using the \"about me\" essays) into 12 clusteres (1 for each sign)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11056\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0                           [gemini]\n",
       "1                           [cancer]\n",
       "2    [pisces, but it doesn't matter]\n",
       "3                           [pisces]\n",
       "4                         [aquarius]\n",
       "Name: sign, dtype: object"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pare the df down to features we care about\n",
    "\n",
    "full = len(df)\n",
    "zodiac = df[df[\"sign\"].notna()]\n",
    "removed = len(zodiac)\n",
    "print(full - removed)\n",
    "\n",
    "zodiac = zodiac.loc[:, [\"sign\", \"essay0\"]]\n",
    "zodiac = zodiac.dropna()\n",
    "features = zodiac.drop(columns=[\"sign\"])\n",
    "features = features.reset_index(drop=True)\n",
    "\n",
    "# now we need the target\n",
    "target = zodiac[\"sign\"]\n",
    "\n",
    "target = target.str.split(n=1)\n",
    "target = target.reset_index(drop=True)\n",
    "target[0:5]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['gemini', 'cancer', 'pisces', 'pisces', 'aquarius']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sign</th>\n",
       "      <th>essay0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>gemini</td>\n",
       "      <td>about me:  i would love to think that i was so...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>cancer</td>\n",
       "      <td>i am a chef: this is what that means. 1. i am ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>pisces</td>\n",
       "      <td>i'm not ashamed of much, but writing public te...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>pisces</td>\n",
       "      <td>i work in a library and go to school. . .</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>aquarius</td>\n",
       "      <td>hey how's it going? currently vague on the pro...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       sign                                             essay0\n",
       "0    gemini  about me:  i would love to think that i was so...\n",
       "1    cancer  i am a chef: this is what that means. 1. i am ...\n",
       "2    pisces  i'm not ashamed of much, but writing public te...\n",
       "3    pisces          i work in a library and go to school. . .\n",
       "4  aquarius  hey how's it going? currently vague on the pro..."
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "targets = []\n",
    "\n",
    "for item in target:\n",
    "    targets.append(item[0])\n",
    "\n",
    "print(targets[0:5])\n",
    "\n",
    "zodiac[\"sign\"] = targets\n",
    "zodiac.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For fun, let's see some of the most common words used by one sign (that don't appear in the general top common words of all the essays)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of essays: 3629\n",
      "Number of essays lost is: 0\n",
      "Total number of essays: 59946\n",
      "Number of essays lost is: 5488\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['intelligence',\n",
       " 'france',\n",
       " 'process',\n",
       " 'longer',\n",
       " 'lead',\n",
       " 'imagine',\n",
       " 'international',\n",
       " 'india',\n",
       " 'emotionally',\n",
       " 'taste']"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# quick look at unique words used by the coolest sign ;)\n",
    "\n",
    "sagittarius = zodiac[zodiac[\"sign\"] == 'sagittarius']\n",
    "\n",
    "sagittarius_most_common, sagittarius_tokenized = analyze(sagittarius)\n",
    "\n",
    "all_most_common, all_tokenized = analyze(df)\n",
    "\n",
    "sagittarius_unique = list(set(sagittarius_most_common[\"Most Common Words\"]) - set(all_most_common[\"Most Common Words\"]))\n",
    "\n",
    "sagittarius_unique[0:10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer(stop_words='english')\n",
    "vectors = vectorizer.fit_transform(zodiac[\"essay0\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# PCA is bad with sparse matrices, so we are using TruncatedSVD\n",
    "\n",
    "X = vectors\n",
    "y = zodiac[\"sign\"]\n",
    "\n",
    "svd = TruncatedSVD()\n",
    "principalComponents = svd.fit_transform(X)\n",
    "\n",
    "# store in dataframe\n",
    "SVD_DF = pd.DataFrame(data = principalComponents)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.14607356 0.06603497]\n"
     ]
    }
   ],
   "source": [
    "# print the explained variance ratios\n",
    "var_ratio = svd.explained_variance_ratio_\n",
    "print(var_ratio)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The **explained variance ratio is pretty abysmal**. But let's try to continue with the clustering in any case. Sometimes **not finding a relationship between two variables is as informative as finding a relationship.**\n",
    "\n",
    "If we were walking into this blind and we wanted to know how many clusters Kmeans would work best with, we would try a silhouette plot and choose the best n_clusters value. But **we already know that we want 12 clusters** (1 for each sign), so we will skip that."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = SVD_DF\n",
    "y_pred = KMeans(n_clusters=12).fit_predict(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'principal component 2')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,12))\n",
    "\n",
    "s = sns.scatterplot(X.iloc[:,0], X.iloc[:,1], \n",
    "                    hue=y_pred, legend=\"full\", palette=\"viridis\", alpha=0.5)\n",
    "s.legend(loc='center left', bbox_to_anchor=(1, 0.5), ncol=1)\n",
    "\n",
    "plt.title('Clustering Zodiac Signs')\n",
    "plt.xlabel('principal component 1')\n",
    "plt.ylabel('principal component 2')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's pretty clear that **there are no defined clusters...** at all. We feel confident in saying that it would be difficult to build a classifier or to accurately cluster the essays with zodiac signs as the ground truth. From this, we can draw a tentative conclusion that what OkCupid users write in the \"about me\" isn't influenced by their zodiac sign in a significant way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "t2 = time.time()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Code run time: 390.1845700740814 seconds\n"
     ]
    }
   ],
   "source": [
    "print(\"Code run time: \" + str(t2-t1) + \" seconds\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion\n",
    "\n",
    "   It was interesting to find that **the essays were more similar than they were different**. That is to say that the **top words by frequency were almost the same**. This makes sense as everyone is writing within the same domain (ie they are presenting themselves on a dating app with the hope of attracting a romantic partner). However, the differences are the interesting parts. It seems, as stated above, that **female marked profiles tend to emphasize ideals and values while male marked profiles tend to emphasize activities and hobbies**. We weren't able to classify gender anywhere beyond 70% accuracy which is not entirely surprising. There is enough variability expected between profiles that getting beyond that number would be surprising.  We learned that **there are differences between the essays of male and female profiles, but they are not so distinct as to be able to predict them very accurately. **\n",
    "    \n",
    "   When it came to **religious profiles we were able to accurately categorize them with about 76% accuracy** using the data from reported drug use, drinking, and smoking. This was fairly impressive and from it we learned that **those who were more 'seriously religious' were less likely to say that they use drugs, consume alcohol, or smoke.** Whether or not this would be indicative of actual behavior in the real world is impossible for us to say, but at the very least **the reported behaviors are different**. Finally, our attempt to find **clusters among zodiacal signs came up empty**. The most generous interpretation of this would be to say that birth month was not predictive of anything. A less kind way of saying would be that zodiacal signs are meaningless, at least within this dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
